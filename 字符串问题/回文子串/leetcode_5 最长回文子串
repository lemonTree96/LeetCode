/*给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。
    如 "babad" => bab / aba
       "abcba" => abcba  
    
    思路：回文串是正反相同的子串，在回文串中，存在奇偶问题。
        (1).当回文串是奇数时，其中间点为一个字符
        (2).当回文串是偶数时，其中间点为两个字符之间
    
    Thinking 1：中心扩散法
            由于回文串的中心结点的两边是相同的，因此，选取回文串的中间点i，同时向两边扩散
        此时就可以获得以i为中心点的回文串的长度。
            同时，由于回文串可能为奇，可能为偶，因此需要分别对不同的回文串计算长度，
        因此，对于长度为n的字符串，其中间点为n(奇子串)+n-1(偶子串)=2n-1
*/
class Solution {
public:
    int center(string s,int a,int b){
        while(a>=0 && b<s.size() && s[a]==s[b]){
            a--;
            b++;
        }
        return b-a-1;
    }
   
    string longestPalindrome(string s) {
        string result;
        int left=0;
        int right=0;
        if(s.empty())
            return result;
        for(int i=0;i<s.size();i++){
            int len1=center(s,i,i);   //n个字符为中心
            int len2=center(s,i,i+1);  //n-1个间隔为中心
            int len=max(len1,len2);

            if(len> right-left){
                left=i-(len-1)/2;
                right=i+len/2;
            }
        }
        result=s.substr(left,right-left+1);
        return result;
    }
};
